<!-- <import name='titleBar' src='../Common/circle'></import> -->

<template>
  <div class="demo-page">    

    <block>
      <camera id="camera" class="camera" 
        deviceposition="{{deviceposition}}" 
        flash="{{flash}}"  onerror="handlerError"
        style="visibility:{{ resultFlag ? 'hidden':'visible' }}"
      ></camera>

      <div class="mask-top shade"  
        style="visibility:{{ resultFlag ? 'hidden':'visible' }}"
      ></div>
      <div class="mask-left shade"
        style="visibility:{{ resultFlag ? 'hidden':'visible' }}"
      ></div>
      <div class="scan-frame"
        style="visibility:{{ resultFlag ? 'hidden':'visible' }}"
      ></div>
      <div class="mask-right shade"
        style="visibility:{{ resultFlag ? 'hidden':'visible' }}"
      ></div>
      <div class="mask-bottom shade"
        style="visibility:{{ resultFlag ? 'hidden':'visible' }}"
      ></div>
  </block>

  <img 
    style="visibility:{{ !resultFlag ? 'hidden':'visible' }}"
    class="result-image" src={{pictureUrl}}></img>

  <div class="bottom-contain {{pop}}" onswipe="gestureFn">
  
      <block if="{{ !resultFlag }}" >
          <div class="btn-contain">
            <div class="album-contain" onclick="chooseAlbum">
              <img  src='../Common/相册.png' class="album-img"></img>
            </div>
            <input class="btn" type="button" onclick="takePhoto" value="拍照" />
            <div class="album-contain"  style="background-color: #fff"></div>
          </div>

      </block>
      
      <block if="{{ resultFlag }}" >
          <div class="return-contain" onclick="hideResultBtn">
              <img  src='../Common/return.png' class="return-img"></img>
          </div>

          <div class="warp-line"></div>
          <text class='object-name'>
            识别物体 : {{objectName}}
          </text>
          <div class="percent-contain">
            <canvas id="canvas"></canvas>
            <text class='percent-num'> {{ (percent*100).toFixed(0) }}% </text>
            <text class='percent-name'> 可信度 </text>
          </div>
          
        
          <div if="{{ percent < TH }}" class="report-contain" onclick="reportBack" >
              <text> 结果不正确？点击反馈 </text>
          </div>

      </block>
  </div>

  </div>
</template>

<script>
  import fetch from '@system.fetch'
  import prompt from '@system.prompt'
  import request from '@system.request'
  import media from '@system.media'

export default {
  protected: {
    name: null,
    icon: null
  },
  private: {
    pop: '',
    deviceposition: "back",
    flash: "auto",
    photoQuality: 'normal',
    pictureUrl:'',
    resultFlag:false,
    fetchedData:'',
    objectName:'',
    percent:0,
    TH: 0.6  //可信度门槛
  },
  onInit () {
    // 设置标题栏
    // this.$page.setTitleBar({ text: this.name })
    // this.fetchDataNormal()
    // this.$page.setStatusBar({ 
    //   immersive: true,
    //   backgroundOpacity:0
    // })
  },
  onShow(){
  },
  createShortcut () {
    // 创建快捷方式
    this.$app.$def.createShortcut()
  },
  gestureFn( e ){
     const di = e.direction
     if(di == 'up'){
        this.pop = 'popUp'
        // if(!this.resultFlag)
          // this.showResult()
     }else if(di == 'down'){
        this.pop = 'popDown'
        if(this.resultFlag)
          this.hideResult()
     }
  },
  handlerError () {
      console.log('用户不允许使用摄像头')
  },
  chooseAlbum(){
    let self = this
      media.pickImage({
        success: function(data) {
          // console.log(`handling success: ${data.uri}`)
          self.pictureUrl = data.uri
          self.uploadFile()
        },
        fail: function(data, code) {
          console.log(`handling fail, code = ${code}`)
        }
      })
  },
  takePhoto () {
    let _this = this

    // 调用相机组件的照相功能
    this.$element('camera').takePhoto({
      quality: _this.photoQuality,
      success(data){
        // 获取回调中的照片地址
        _this.pictureUrl = data.uri
        // console.log(data)
        _this.uploadFile()
        // 上传
      },
      fail(data, code) {
        console.log('take photos failed：code' + code.code)
      },
      complete() {
        console.log('complete')
      }
    })
  },
  showResult(){
      this.resultFlag = true
      
      let self = this
      setTimeout(()=>{
        self.drawCanvas()
      },100)
  },
  hideResult(){
      this.resultFlag = false
  },
  hideResultBtn(){
    this.pop = 'popDown'
    if(this.resultFlag)
          this.hideResult()
  },
  fetchDataNormal () {
    const self = this
    this.fetchedData = 'fetching...'
    console.log(this.fetchedData)
    fetch.fetch({
      url: 'http://139.9.124.104:7001/test',
      data: {
        id: 'LocalNews',
        ajax: 'json'
      },
      responseType: 'json',// 支持返回类型是text、json、file和arraybuffer，默认返回字符串文本。
      success: function (ret) {
        // 注意self.fetchedData与ret接收的数据类型保持一致
        // 设置responseType为json类型时，ret.data为json对象
        self.fetchedData = '网络数据(jsonp)：' + JSON.stringify(ret.data)
        console.log(ret)
        prompt.showToast({
          message: 'success'
        })
      }
    })
  },
  uploadFile () {
      this.showLoading('查询中...')
      const self = this
      request.upload({
        url: 'http://139.9.124.104:7001/upload',
        files: [
          {
            uri: self.pictureUrl,
            name: 'upload',
            filename: '照片.jpg'
          }
        ],
        success: function (ret) {
          // self.fileUploadData = ret.data
          let res = ret.data
          res = JSON.parse(res)
          self.objectName = res.item
          self.percent  = +Math.random().toFixed(2)
          self.hideLoading()
          self.pop = 'popUp'
          self.showResult()
        },
        fail: function (msg, code) {
          self.fileUploadData = `${code}: ${msg}`
          console.info(`### request.upload ### ${code}: ${msg}`)
          self.hideLoading()
          prompt.showToast({
            message: `${code}: ${msg}`
          })
        }
      })
  },
  drawCanvas() {
      const canvas = this.$element('canvas')      
      const ctx = canvas.getContext('2d')

      const width = 200;
      const height = 200;


      // console.log(ctx,width,height)
      // ctx.translate( width, height / 2); // 将画布原点移动到中心位置
      // ctx.rotate(-Math.PI); // 旋转-180°

      // ctx.translate(100,20)
      // ctx.transform(1,1,0,0,0,0)
      // ctx.transform(1, 0, 0, 1, 100, 100);

      let circleObj = {
          ctx: ctx,
          /*圆心*/
          x: 100,
          y: 100,
          /*半径*/
          radius: height / 2 - 10,//半径比canvas宽的一半要小
      };

      let backCircle = {
        ...circleObj,
        startAngle: -Math.PI,
        endAngle  : 0,
        color     : '#bfbfbf',
        lineWidth: 5
      }
      // this.drawCircle(backCircle); 

      // return
      let percent = this.percent
      let percentStep = 0.1
      let targetAngle = Math.PI * percent
      let color

      if(percent <= 0.5){
        color  = '#ff4d4f'   //红
      }else if(percent <= 0.7){
        color  = '#faad14'   //黄
      }else{
        color  = '#95de64'   //绿
      }

      let frontCircle = {
        ...circleObj,
        startAngle: -Math.PI,
        endAngle  : -Math.PI,
        color     : color,
        lineWidth : 9
      }
      let self = this
      let ti = setInterval(()=>{
          frontCircle.endAngle += percentStep
          if (Math.abs(frontCircle.endAngle - frontCircle.startAngle) 
                >= Math.abs(targetAngle) ){
              clearInterval(ti)
          }
          ctx.clearRect(0, 0, width, height);
          self.drawCircle(backCircle);
          self.drawCircle(frontCircle)
      },30)

    },
    drawCircle(circleObj) {
      let ctx = circleObj.ctx;
      ctx.beginPath();
      ctx.arc(circleObj.x, circleObj.y, circleObj.radius, circleObj.startAngle, circleObj.endAngle, false);
      //设定曲线粗细度
      ctx.lineWidth = circleObj.lineWidth;
      //给曲线着色
      ctx.strokeStyle = circleObj.color;
      //连接处样式
      ctx.lineCap = 'round';
      //给环着色
      ctx.stroke();
      ctx.closePath();
    },
    showLoading ( msg) {
      prompt.showLoading({
        message: msg,
        loadingColor: '#29B6F6'
      })
    },
    hideLoading () {
      prompt.hideLoading()
    },
    reportBack(){
      prompt.showToast({
        message: '反馈成功!'
      })
    }
}
</script>

<style>

  .demo-page {
    width: 100%;
  }

  .bottom-contain{
    position:fixed;
    bottom: 0px;
    height: 200px;
    width: 100%;
    background-color: #ffffff;
    border-top-left-radius: 65px;
    border-top-right-radius: 65px;

    flex-direction: column;
    /*justify-content:center;*/
    align-items: center;
  }
  .popUp{
    animation-name: PopUp;
    animation-duration: 300ms;
    height: 500px;
  }
  .popDown{
    animation-name: PopDown;
    animation-duration: 300ms;
    height: 200px;
  }
  @keyframes PopUp {
    from {
      height: 200px;
    }
    to {
      height: 500px;
    }
  }
  @keyframes PopDown {
    to {
      height: 200px;
    }
    from {
      height: 500px;
    }
  }

  .btn-contain{
    /*flex-direction: column;*/
    width: 100%;
    height: 100%;
    justify-content: space-between;
    align-items: center;
  }
  /* 按钮 */
  .btn {
    width: 250px;
    height: 86px;
    /*margin-top: 57px;*/
    border-radius: 43px;
    background-color: #13c2c2;
    font-size: 30px;
    color: #ffffff;
  }
  .btn:active{
    background-color: #08979c;
  }
  /* 相册按钮 */
  .album-contain{
    background-color: #13c2c2;
    width: 60px;
    height: 60px;
    border-radius: 25px;
    margin-left: 40px;
    align-items: center;
    justify-content: center;
  }
  .album-contain:active{
    background-color: #08979c;
  }
  .album-img{
    object-fit:center;
    /*width: 500px;*/
    height: 36px;
    width: 36px;
  }

  .camera {
    width: 750px;
    height: 100%;
    position: fixed;
    top: 0;
    left: 0;
  }
  
  /*中间取景框*/
  .scan-frame{ 
     position: fixed;
     top: 200px;
     left: 125px;
     height: 500px;
     width: 500px;
     background-color: #fff;
     opacity: 0.1;
  }

  /*四周遮罩*/
  .shade{
    background-color: #f0f5ff;
    opacity: 0.6;
  }
  .mask-top{
    position: fixed;
    top: 0;
    left: 0;
    width: 750px;
    height: 200px;
  }
  .mask-left{
    position: fixed;
    top: 200px;
    width: 125px;
    height: 500px;
  }
  .mask-right{
    position: fixed;
    left: 625px;
    top: 200px;
    width: 125px;
    height: 500px;
  }
  .mask-bottom{
    position: fixed;
    top: 700px;
    width: 750px;
    height: 800px;
  }

  /*拍摄图像*/
  .result-image{
    width: 750px;
    height: 90%;
  }
  .result-text{
    font-size:20px;
    font-weight:bold;
  }


  /* 返回按钮 */
  .return-contain{
    position: absolute;
    background-color: #e8e8e8;
    width: 50px;
    height: 50px;
    border-radius: 25px;
    /*margin-left: 40px;*/
    align-items: center;
    justify-content: center;
    top: 20;
    left: 40;
  }
  .return-contain:active{
    background-color: #bfbfbf;
  }
  .return-img{
    object-fit:center;
    height: 30px;
    width: 30px;
  }

  .warp-line{
    margin-top: 10px;
    height: 10px;
    width: 350px;
    background-color: #8c8c8c;
    border-radius: 5px;
  }

  .object-name{
    margin-top: 50px;
    font-size: 30px;
    font-weight: 900;
  }
  .percent-contain{
    margin-top: 60px;
    align-items: center;
    justify-content: center;
    display: flex;
    flex-direction: column;
  }
  canvas{
    width: 200px;
    height: 100px;
    /*background-color: #f0f5ff*/
  } 
  .percent-num{
    margin-top: -35px;
  }
  .percent-name{
    font-weight: 800;
    font-size: 35px;
  }


  /* 反馈 */
  .report-contain{
    background-color: #e8e8e8;
    margin-top: 10px;
    width: 200px;
    height: 30px;
    align-items: center;
    justify-content: center;
    border-radius: 10px;
  }
  .report-contain:active{
    background-color: #bfbfbf
  }
  .report-contain text{
    font-size: 15px;
    color: #595959;
    font-weight: 500;
  }



</style>
