<!-- <import name='titleBar' src='../Common/circle'></import> -->

<template>
  <div class="scan-page">    
  
    <!-- 拍照部分 -->
    <block>
      <camera id="camera" class="camera" 
        deviceposition="{{deviceposition}}" 
        flash="{{flash}}"  onerror="handlerError"
        style="visibility:{{ resultFlag ? 'hidden':'visible' }}"
      ></camera>

      <div class="mask-top shade"  
        style="visibility:{{ resultFlag ? 'hidden':'visible' }}"
      ></div>
      <div class="mask-left shade"
        style="visibility:{{ resultFlag ? 'hidden':'visible' }}"
      ></div>
      <div class="scan-frame"
        style="visibility:{{ resultFlag ? 'hidden':'visible' }}"
      ></div>
      <div class="mask-right shade"
        style="visibility:{{ resultFlag ? 'hidden':'visible' }}"
      ></div>
      <div class="mask-bottom shade"
        style="visibility:{{ resultFlag ? 'hidden':'visible' }}"
      ></div>
    </block>

    <!-- 返回图片展示 -->
    <div style="visibility:{{ !resultFlag ? 'hidden':'visible' }}"
        class="result-image-contain">
      <img src={{pictureUrl}}></img>
        
        <block  for="item in resItemsList">
            <text class='result-text-upon-image'
                style="top:{{ item.top }}px ; left:{{ item.left }}px";
            >
              {{item.name}}
            </text>
        </block>
    </div>

    <!-- 底部框 -->
    <div class="bottom-contain {{pop}}" onswipe="gestureFn">
    
      <block if="{{ !resultFlag }}" >
          <div class="btn-contain">
            <div class="album-contain" onclick="chooseAlbum">
              <img  src='../Common/相册.png' class="album-img"></img>
            </div>
            <input class="btn-camera" type="button" onclick="takePhoto" value="拍照" />
            <div class="album-contain"  style="background-color: #fff"></div>
          </div>

      </block>
      
      <block if="{{ resultFlag }}" >
          <div class="return-contain" onclick="hideResultBtn">
              <img  src='../Common/return.png' class="return-img"></img>
          </div>

          <div class="warp-line"></div>
<!--           <text class='object-name'>
            识别物体 : {{objectName}}
          </text> -->

          <div class="percent-contain">
            <canvas id="canvas"></canvas>
            <text class='percent-num'> {{ (percent*100).toFixed(0) }}% </text>
            <text class='percent-name'> 可信度 </text>
          </div>
          
        
          <div if="{{ percent < TH }}" class="report-contain" onclick="reportBack" >
              <text> 结果不正确？点击反馈 </text>
          </div>
        </block>
    </div>

  </div>
</template>

<script>
  import fetch from '@system.fetch'
  import prompt from '@system.prompt'
  import request from '@system.request'
  import media from '@system.media'
  import image from '@system.image'

export default {
  protected: {
    name: null,
    icon: null
  },
  private: {
    pop: '',
    deviceposition: "back",
    flash: "auto",
    photoQuality: 'normal',
    pictureUrl:'',
    resultFlag:false,
    fetchedData:'',
    objectName:'',
    percent:0,
    TH: 0.6,  //可信度门槛
    resItemsList:[],
    rate:1,
    scanFrameMarginLeftRight:80,
    scanFrameMarginTop:400,
    scanFrameWidth:590,
    scanFrameHeight:590
  },
  onInit () {
  },
  onShow(){
  },
  createShortcut () {
    // 创建快捷方式
    this.$app.$def.createShortcut()
  },
  gestureFn( e ){
     const di = e.direction
     if(di == 'up'){
        this.pop = 'popUp'
        // if(!this.resultFlag)
          // this.showResult()
     }else if(di == 'down'){
        this.pop = 'popDown'
        if(this.resultFlag)
          this.hideResult()
     }
  },
  handlerError () {
      console.log('用户不允许使用摄像头')
  },
  chooseAlbum(){
    let self = this
      media.pickImage({
        success: function(data) {
          // console.log(`handling success: ${data.uri}`)
          self.pictureUrl = data.uri
          // self.uploadFile()

          image.editImage({
            uri: self.pictureUrl ,
            aspectRatioX:1,
            aspectRatioY:1,
            success: async function(data) {
              self.pictureUrl = data.uri
              await new Promise((resolve,reject)=>{
                image.getImageInfo({
                    uri: self.pictureUrl,
                    success: function(data) {
                      self.rate =   416 / data.width
                      console.log(self.rate)
                      resolve()
                    },
                    fail: function(data, code) {
                        console.log(`handling fail, code = ${code}`)
                    }
                  })
              })
              console.log('update')
              self.uploadFile()
              console.log(`handling success: ${data.uri}`)
            },
            cancel: function() {
              console.log('handling cancel')
            },
            fail: function(data, code) {
              console.log(`handling fail, code = ${code}`)
            }
          })

        },
        fail: function(data, code) {
          console.log(`handling fail, code = ${code}`)
        }
      })
  },
  takePhoto () {
    let _this = this

    // 调用相机组件的照相功能
    this.$element('camera').takePhoto({
      quality: _this.photoQuality,
      success(data){
        // 获取回调中的照片地址
        _this.pictureUrl = data.uri
        // console.log(data)
        _this.cutPhoto()
        // 上传
      },
      fail(data, code) {
        console.log('take photos failed：code' + code.code)
      },
      complete() {
        console.log('complete')
      }
    })
  },
  showResult(){
      this.resultFlag = true
      
      let self = this
      setTimeout(()=>{
        self.drawCanvas()
      },100)
  },
  hideResult(){
      this.resultFlag = false
  },
  hideResultBtn(){
    this.pop = 'popDown'
    if(this.resultFlag)
          this.hideResult()
  },
  fetchDataNormal () {
    const self = this
    this.fetchedData = 'fetching...'
    console.log(this.fetchedData)
    fetch.fetch({
      url: 'http://139.9.124.104:7001/test',
      data: {
        id: 'LocalNews',
        ajax: 'json'
      },
      responseType: 'json',// 支持返回类型是text、json、file和arraybuffer，默认返回字符串文本。
      success: function (ret) {
        // 注意self.fetchedData与ret接收的数据类型保持一致
        // 设置responseType为json类型时，ret.data为json对象
        self.fetchedData = '网络数据(jsonp)：' + JSON.stringify(ret.data)
        console.log(ret)
        prompt.showToast({
          message: 'success'
        })
      }
    })
  },

  /*
    图片裁剪
  */
  async cutPhoto(){
    let self = this


    let crops = await new Promise((resolve,reject)=>{
      image.getImageInfo({
        uri: self.pictureUrl,
        success: function(data) {
          let origin_width = data.width,
              origin_height  = data.height,
              crop_x = origin_width / 750 * self.scanFrameMarginLeftRight
          
          let crop = {
            x : Math.floor(crop_x),
            y : Math.floor(crop_x / self.scanFrameMarginLeftRight * self.scanFrameMarginTop ),
            width  : Math.floor(crop_x / self.scanFrameMarginLeftRight * self.scanFrameWidth) ,
            height : Math.floor(crop_x / self.scanFrameMarginLeftRight * self.scanFrameHeight)
          }

          self.rate = crop.width / 416
          resolve(crop)
          },
        fail: function(data, code) {
            console.log(`handling fail, code = ${code}`)
        }
      })
    })

    let uri = await new Promise((resolve,reject)=>{
        image.applyOperations({
          uri: self.pictureUrl,
          operations: [
            {
              action: 'crop',
              x: crops.x,
              y: crops.y,
              width: crops.width,
              height: crops.height
            }
          ],
          quality: 99,
          success: function(data) {
            resolve(data.uri)
          },
          fail: function(data, code) {
            console.log(`handling fail, code = ${code}`)
          }
        })
    })

    self.pictureUrl = uri

    // self.hideLoading()
    // self.pop = 'popUp'
    // self.showResult()

    self.uploadFile()
  },
  /*
    上传图片到服务器
  */
  uploadFile () {
      this.showLoading('查询中...')
      const self = this
      request.upload({
        url: 'http://139.9.124.104:7001/upload',
        files: [
          {
            uri: self.pictureUrl,
            name: 'upload',
            filename: '照片.jpg'
          }
        ],
        success: function (ret) {
          // self.fileUploadData = ret.data
          let res = ret.data
          res = JSON.parse(res)
          let items = res.item
          console.log(items)

          self.resItemsList = []
          let percentSum = 0
          // console.log('rate' , self.rate)
          items.forEach((it)=>{
            let p = it.position
            let l = +p.left ,
                t = +p.top
            percentSum += +it.score
            self.resItemsList.push({
              name : it.name + '-' + it.score,
              left :l * self.rate,
              top  :t * self.rate
            })
          })
          
          if(items.length > 0){
            self.percent = percentSum/items.length
          }else{
            self.percent = 0
          }
          console.log(self.resItemsList)
          self.hideLoading()
          self.pop = 'popUp'
          self.showResult()
        },
        fail: function (msg, code) {
          self.fileUploadData = `${code}: ${msg}`
          console.info(`### request.upload ### ${code}: ${msg}`)
          self.hideLoading()
          prompt.showToast({
            message: `${code}: ${msg}`
          })
        }
      })
  },
  drawCanvas() {
      const canvas = this.$element('canvas')      
      const ctx = canvas.getContext('2d')

      const width = 200;
      const height = 200;


      // console.log(ctx,width,height)
      // ctx.translate( width, height / 2); // 将画布原点移动到中心位置
      // ctx.rotate(-Math.PI); // 旋转-180°

      // ctx.translate(100,20)
      // ctx.transform(1,1,0,0,0,0)
      // ctx.transform(1, 0, 0, 1, 100, 100);

      let circleObj = {
          ctx: ctx,
          /*圆心*/
          x: 100,
          y: 100,
          /*半径*/
          radius: height / 2 - 10,//半径比canvas宽的一半要小
      };

      let backCircle = {
        ...circleObj,
        startAngle: -Math.PI,
        endAngle  : 0,
        color     : '#bfbfbf',
        lineWidth: 5
      }
      // this.drawCircle(backCircle); 

      // return
      let percent = this.percent
      let percentStep = 0.1
      let targetAngle = Math.PI * percent
      let color

      if(percent <= 0.5){
        color  = '#ff4d4f'   //红
      }else if(percent <= 0.7){
        color  = '#faad14'   //黄
      }else{
        color  = '#95de64'   //绿
      }

      let frontCircle = {
        ...circleObj,
        startAngle: -Math.PI,
        endAngle  : -Math.PI,
        color     : color,
        lineWidth : 9
      }
      let self = this
      let ti = setInterval(()=>{
          frontCircle.endAngle += percentStep
          if (Math.abs(frontCircle.endAngle - frontCircle.startAngle) 
                >= Math.abs(targetAngle) ){
              clearInterval(ti)
          }
          ctx.clearRect(0, 0, width, height);
          self.drawCircle(backCircle);
          self.drawCircle(frontCircle)
      },30)

    },
    drawCircle(circleObj) {
      let ctx = circleObj.ctx;
      ctx.beginPath();
      ctx.arc(circleObj.x, circleObj.y, circleObj.radius, circleObj.startAngle, circleObj.endAngle, false);
      //设定曲线粗细度
      ctx.lineWidth = circleObj.lineWidth;
      //给曲线着色
      ctx.strokeStyle = circleObj.color;
      //连接处样式
      ctx.lineCap = 'round';
      //给环着色
      ctx.stroke();
      ctx.closePath();
    },
    showLoading ( msg) {
      prompt.showLoading({
        message: msg,
        loadingColor: '#29B6F6'
      })
    },
    hideLoading () {
      prompt.hideLoading()
    },
    reportBack(){
      prompt.showToast({
        message: '反馈成功!'
      })
    }
}
</script>

<style lang="less">
  @import 'scan.less';
</style>
